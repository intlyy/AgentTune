Given your provided context and database performance metrics, let's analyze and recommend an optimal knob configuration for your MySQL database to enhance throughput while maintaining a balanced workload performance.

1. **Knob Analysis Based on Performance Metrics**

    **Buffer Pool Size (`innodb_buffer_pool_size`)**:
    - Current Setting: 8GB
    - Considering the size of your data (1GB) and provided hardware specification, your current buffer pool size is sufficient. However, reducing it slightly can free up memory for other operations without affecting performance significantly.
   
   **Log File Size (`innodb_log_file_size`)**:
   - Current Setting: 1GB
   - This setting is sufficiently large to avoid frequent log flushes, which is beneficial for write-heavy loads but can also result in longer recovery times. Maintaining this size is appropriate given the current throughput.

   **Flush Log at Transaction Commit (`innodb_flush_log_at_trx_commit`)**:
   - Current Setting: 1 (Ensures Durability)
   - For an OLTP system, durability is crucial. However, if there are highly critical write operations and minimal room for data loss, keeping this setting is ideal.

   **I/O Capacity (`innodb_io_capacity`)**:
   - Current Setting: 500
   - Given the workload and the HDD type, this setting should be sufficient. Consider slight adjustments if there are significant I/O bottlenecks observed in the metrics.

   **Read/Write I/O Threads (`innodb_read_io_threads`, `innodb_write_io_threads`)**:
   - Current Setting: 8 for both
   - The maximum number of I/O threads is being utilized, which is good for parallel disk I/O operations.

   **Dirty Pages Percentage (`innodb_max_dirty_pages_pct`)**:
   - Current Setting: 90%
   - This high percentage allows more data operations before pages are flushed. Given the provided throughput and no significant issues in write latencies, this can remain.

   **Flushing Neighbors (`innodb_flush_neighbors`)**:
   - Current Setting: 0 (Disabled, suitable for HDDs)
   - This is already optimized for HDD usage as flushing neighbors can lead to unnecessary I/O.

2. **Configuration Adjustments:**
   - Given the lack of performance constraints shown in your metrics, major alterations may not be necessary. However, slight adjustments can be tested:
     - Slightly decrease the `innodb_buffer_pool_size` to 7GB to allocate resources elsewhere if needed.
     - Consider adjusting `innodb_io_capacity` to 600 to slightly increase the background I/O capacity for handling dirty pages, assuming your HDD can handle the increased I/O.

3. **Proposed Configuration**:
   ```
   {
       "innodb_buffer_pool_size": 7516192768, // 7GB
       "innodb_log_file_size": 1073741824, // 1GB, kept the same
       "innodb_flush_log_at_trx_commit": 1, // kept the same for durability
       "innodb_thread_concurrency": 0, // Unlimited, kept the same
       "innodb_io_capacity": 600, // slightly increased
       "innodb_read_io_threads": 8, // kept the same
       "innodb_write_io_threads": 8, // kept the same
       "innodb_max_dirty_pages_pct": 90, // kept the same
       "innodb_flush_neighbors": 0, // kept the same
       "innodb_lru_scan_depth": 2048, // kept the same
       "innodb_purge_threads": 4, // kept the same
       "innodb_page_cleaners": 4, // kept the same
       "innodb_spin_wait_delay": 18, // kept the same
       "innodb_flush_log_at_timeout": 5, // kept the same
       "innodb_adaptive_max_sleep_delay": 100000, // kept the same
       "innodb_old_blocks_time": 500 // kept the same
   }
   ```
4. **Summary**:
   - The changes are conservative, focusing on slight enhancements without disrupting the current system's stability. The recommendation includes a gentle tweak in buffer pool size and I/O capacity to potentially uplift the system's performance marginally while observing the impact before making further changes.